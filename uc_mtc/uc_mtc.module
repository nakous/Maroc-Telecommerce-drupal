<?php
// $Id: uc_mtc.module,v 1.1.2.3 2010/03/17 12:53:24 mogtofu33 Exp $

/**
 * @file
 * Integrates mtc payment service.
 *
 * Development sponsored by arthur-com.net
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_mtc_menu() {
  // Callback functions for mtc.
  $items['cart/mtc/checkout'] = array(
    'title' => 'Checkout order',
    'page callback' => 'uc_mtc_payment',
    'access callback' => 'uc_mtc_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_mtc.pages.inc',
  );
  $items['cart/mtc/effectue'] = array(
    'title' => 'Order complete',
    'page callback' => 'uc_mtc_effectue',
    'access callback' => 'uc_mtc_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_mtc.pages.inc',
  );
  $items['cart/mtc/refuse'] = array(
    'title' => 'Order refused',
    'page callback' => 'uc_mtc_refuse',
    'access callback' => 'uc_mtc_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_mtc.pages.inc',
  );
  $items['cart/mtc/annule'] = array(
    'title' => 'Order canceled',
    'page callback' => 'uc_mtc_annule',
    'access callback' => 'uc_mtc_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_mtc.pages.inc',
  );
  $items['cart/mtc/auto'] = array(
    'title' => 'Order auto',
    'page callback' => 'uc_mtc_auto',
    'access callback' => 'uc_mtc_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_mtc.pages.inc',
  );  
  $items['cart/mtc/update'] = array(
    'title' => 'Order update',
    'page callback' => 'uc_mtc_update',
    'access callback' => 'uc_mtc_completion_access',
    'type' => MENU_CALLBACK,
    'file' => 'uc_mtc.pages.inc',
  ); 
  // $items['validecartebysite'] = array(
    // 'title' => 'valide carte by site',
    // 'page callback' => 'uc_mtc_validecartebysite',
    // 'access callback' => 'uc_mtc_completion_access',
    // 'type' => MENU_CALLBACK,
  // );
  return $items;
}

// Make sure anyone can complete their mtc orders.
function uc_mtc_completion_access() {
  return TRUE;
}

function uc_mtc_validecartebysite() {
global $user;
$var['error']=false;
$var['message']='';
		// if(bn.length==0){message +='<br>entre le Nom de Banque';}
		// if(dx.length!=5){message +='il fait saise 5 caractiere';}
		// if(ccn.length!=5){message +='il fait saise 4 cheffre';}
$bn = $_GET['bn'];
if($bn==''){$var['message'] .='entre le Nom de Banque<br>';$var['error']=true;}
$cntdx = $_GET['cntdx'];
if($cntdx!=5){$var['message'] .='Date d\'expiration :il fait saise 5 caractiere<br>';$var['error']=true;}
$dx = $_GET['dx'];
// if(strlen(dx)!=5){$var['message'] .='Date d'expiration : il fait saise 5 caractiere<br>';$var['error']=true;}
$ccn =$_GET['ccn'];
if(strlen($ccn)!=4){$var['message'] .='Les 4 derniers chiffres de la carte : il fait saise 4 cheffre<br>';$var['error']=true;}
if(!is_numeric($ccn)){$var['message'] .='Les 4 derniers chiffres de la carte : n\'est pas de type numérique!';$var['error']=true;}
$pb = $_GET['pb'];
if($pb==''){$var['message'] .='entre le Nom de Banque<br>';$var['error']=true;}

$mount=0;
$resultat=db_result(db_query('select count(*) from badget where bn=%s and ccn=%d and pb=%s',$bn,$ccn,$pb));
if($var['error']!=true){
	if($resultat==0){
			db_query("INSERT INTO {badget} (`mount`, `bn`, `dx`, `ccn`, `pb`, `buid`, `count`) VALUES ('%d', '%s', '%s', '%s', '%s', '%d', '%d')",$mount,$bn,$dx,$ccn,$pb,$user->uid,1);
		}else{
			$cart=db_fetch_array(db_query('select * from badget where bn=%s and ccn=%d and pb=%s',$bn,$ccn,$pb));
			if($cart['buid']!=$user->uid){$var['message'] .='cette carte bancaire est utilise pour autre compte<br>';$var['error']=true;}
			else{
				db_query("UPDATE {badget} SET `count` = count+1 WHERE bn=%s and ccn=%d and pb=%s",$bn,$ccn,$pb);
			}
	}
}
 echo drupal_to_js($var);
}

/**
 * Implementation of hook_ucga_display().
 */
function uc_mtc_ucga_display() {
  // Tell UC Google Analytics to display the e-commerce JS on the custom
  // order completion page for this module.
  if (arg(0) == 'cart' && arg(1) == 'mtc' && arg(2) == 'effectue') {
    return TRUE;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function uc_mtc_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'uc_cart_checkout_form') {
  global $user;
// $order = commerce_cart_order_load($user->uid);
// print_r($form);
 $passe=false;
 $result = db_query("SELECT * FROM {uc_cart_products} WHERE cart_id = '%d'", uc_cart_get_id());
  while ($item = db_fetch_object($result)) {
      if ($item = uc_cart_get_item($item)) {
	  if($item->nid==55 or $item->nid==67 or $item->nid== 66 or $item->nid== 56 or $item->nid== 65 or $item->nid== 64){
	   $passe=true;
	  }
        // $items[] = $item;
      }
    }
 // print_r($items);
  ['#submit'][0] => uc_cart_checkout_form_submit
        )
 if($passe==true){
  $form['panes']['codecarte'] =Array
                        (
                            '#type' => 'textarea',
                            '#title'=> 'Code de la carte',
							'#required' => TRUE,
							'#weight' => 0
                        );}
  // print_r($form);
  // $form['panes']['comments']['#description']=$form['panes']['comments']['#description'].'<br><b style="color: red;">Si vous chose les recharges, Merci de Tape votre Numèro de carte ICI</b>';
  // $form['panes']['comments']['#weight'] = 30;
  // $form['panes']['payment']['#weight'] = 20;
  // $form['panes']['billing']['#weight'] = 40;
  // print_r($form);
  }
  if ($form_id == 'uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);
    if ($order->payment_method == 'mtc') {
	unset($form['submit']);
	unset($form['back']);
	
	include("utf8.php");
	global $user;
	 // drupal_add_js(drupal_get_path('module', 'uc_mtc') .'/mtc.js');
	$dataMD5=variable_get('actionSLK', '') . variable_get('storeId', '') . $order->order_id . $order->order_total . $user->mail . variable_get('SLKSecretKey', '');
	$checksum=MD5(utf8entities(rawurlencode($dataMD5)));
	$form['#name'] = "paymentForm";
	$form['#action'] = variable_get('actionSLK', '');
	$form['#method'] = 'post';
	$form['storeId'] = array('#type' => 'hidden', '#value' =>variable_get('storeId', '')) ;
	$form['langue'] = array('#type' => 'hidden', '#value' =>"FR") ;
	$form['offerURL'] = array('#type' => 'hidden', '#value' =>_uc_mtc_url()) ;
	$form['updateURL'] = array('#type' => 'hidden', '#value' =>_uc_mtc_url().'cart/mtc/effectue') ;
	$form['bookURL'] = array('#type' => 'hidden', '#value' =>_uc_mtc_url().'cart/mtc/update') ;
	$form['cartId'] = array('#type' => 'hidden', '#value' =>$order->order_id) ;
	$form['totalAmountTx'] = array('#type' => 'hidden', '#value' =>$order->order_total) ;
	$form['symbolCur'] = array('#type' => 'hidden', '#value' =>'MAD') ;
	$name =$order->delivery_first_name.' '.$order->delivery_last_name;
	$form['name'] = array('#type' => 'hidden', '#value' =>$name) ;
	$adresse=$order->delivery_street1.' '.$order->delivery_street2;
	$form['address'] = array('#type' => 'hidden', '#value' =>$adresse) ;
	$form['city'] = array('#type' => 'hidden', '#value' =>$order->delivery_city) ;
	$form['state'] = array('#type' => 'hidden', '#value' =>uc_zone_get_by_id($order->delivery_zone)) ;
	$form['country'] = array('#type' => 'hidden', '#value' => 'MA') ;
	$form['postCode'] = array('#type' => 'hidden', '#value' => $order->delivery_postal_code) ;
	$form['tel'] = array('#type' => 'hidden', '#value' =>$order->delivery_phone) ;
	$form['email'] = array('#type' => 'hidden', '#value' => $user->mail) ;
	$form['checksum'] = array('#type' => 'hidden', '#value' =>$checksum) ;
	$form['paiement'] = array('#type' => 'hidden', '#value' =>'Payer') ;
	
	// $paymentBrandName=array('VI' => 'Visa',
		// 'MA' => 'MasterCard',
		// 'MT' => 'Maestro',
		// 'Cmi' => 'cmi',
		// 'DI' => 'Discover',
		// 'DC'=> 'Diners Club',
		// 'MC'=> 'MobiCash');
	// $form['bankName'] = array('#type' => 'textfield', '#title'=>'Nom de la banque','#size' => 24,'#required' => TRUE,'#maxlength' => 10,'#description' => 'Le nom de la banque de l\'acheteur') ;
	// $form['expirationDate'] = array('#type' => 'textfield','#default_value' => '03/15', '#title'=>'Date d\'expiration','#size' => 10,'#required' => TRUE,'#maxlength' => 5,'#description' => 'Date d\'expiration de la carte bancaire (mois/annee ex:03/15)') ;
	// $form['ccn'] = array('#type' => 'textfield', '#title'=>'Les 4 derniers chiffres de la carte','#size' => 8,'#required' => TRUE,'#maxlength' => 4,'#description' => 'Les 4 derniers chiffres de la carte de paiement utilisée') ;
	// $form['paymentBrandName'] = array('#type' => 'select', '#title'=>'Type de la carte','#options'=>$paymentBrandName,'#required' => TRUE,'#description' => 'Type de la carte de paiement utilisée') ;
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Continue checkout'),
	);

      uc_mtc_cache('save', $_SESSION['sespb']);
    }
  }
  elseif ($form_id == 'uc_store_format_settings_form') {
    $form['currency']['uc_currency_code']['#description'] .= ' '. t('mtc only accepts the following currencies: @list', array('@list' => implode(', ', array_keys(_uc_mtc_currency(FALSE)))));
  }
  elseif ($form_id == 'uc_cart_checkout_form') {
    // Cache the mtc details for use in other functions.
    if (isset($_SESSION['sespb'])) {
      uc_mtc_cache('save', $_SESSION['sespb']);
      // Store the encrypted details to the form for processing on submit.
      $form['payment_details_data'] = array(
        '#type' => 'hidden',
        '#value' => $_SESSION['sespb'],
      );
      // Clear the session of the details.
      unset($_SESSION['sespb']);
    }
    unset($_SESSION['uc_mtc_pay']);
  }
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_payment_method().
 */
function uc_mtc_payment_method() {
  $img = drupal_get_path('module', 'uc_mtc') .'/images/logo/mtc.gif';
  $alt = t('Credit card on a secured server.');
  $title = theme('image', $img, $alt, $alt);
  $methods[] = array(
    'id' => 'mtc',
    'name' => t('Credit Card with mtc'),
    'title' => $title . variable_get('uc_mtc_method_title', t('Credit card on a secured server.')),
    'review' => t('Credit card with mtc'),
    'desc' => variable_get('uc_mtc_method_descr', t('Redirect to mtc to pay by credit card.')),
    'callback' => 'uc_payment_method_mtc',
    'weight' => 0,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );
  return $methods;
}

/**
 * Implementation of hook_store_status().
 *
 * Currently gives some infos/warning about uc_mtc configuration
 */
function uc_mtc_store_status() {
  $statuses = array();
  // Warning about "demo mode"
  if (variable_get('uc_mtc_site', '') == '' || variable_get('uc_mtc_rang', '') == '' || variable_get('uc_mtc_identifiant', '') == '' ) {
    $statuses[] = array(
      'status' => 'warning',
      'title' => t('mtc Configuration'),
      'desc' => t('mtc is working in <strong>demo mode</strong> because no site, rank and/or identifier is set.'),
    );
  }
  // Error about the cgi
  $cgi = variable_get('uc_mtc_cgi_path', '');
  if (($cgi == '') || !is_file($cgi)) {
    $statuses[] = array(
      'status' => 'error',
      'title' => t('mtc configuration'),
      'desc' => t('The mtc module need cgi. Please refer to mtc documentation.'),
    );
  }
  return $statuses;
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Callback for mtc payment method settings.
 */
function uc_payment_method_mtc($op, &$arg1) {
  switch ($op) {
    case 'cart-details':
      $details = variable_get('uc_mtc_method_descr', t('Redirect to mtc to pay by credit card.'))
       . drupal_get_form('uc_payment_method_mtc_form', $arg1);
      return uc_strip_form($details);

    case 'cart-review':
      if (isset($_SESSION['sespb'])) {
        $payment_types = _uc_mtc_payment_type();
        $payment_details = unserialize($_SESSION['sespb']);
        $payment_type = $payment_types[$payment_details['uc_mtc_typepaiement']];
        if ($payment_type) {
          $review[] = array('title' => t('Card Type'), 'data' => $payment_type);
        }
      }
      return $review;
      
    case 'cart-process':
      $rc = TRUE;
      // Fetch the mtc details from the $_POST directly.
      $uc_mtc_data = array(
        'uc_mtc_typepaiement' => check_plain($_POST['uc_mtc_typepaiement']),
      );
      if (!$uc_mtc_data['uc_mtc_typepaiement']) {
        drupal_set_message(t('Payment Type field is required.'), 'error');
        $rc = FALSE;
      }
      // Go ahead and put the mtc data in the payment details array.
      $arg1->payment_details = $uc_mtc_data;
      $_SESSION['sespb'] = serialize($arg1->payment_details);
      return $rc;

    case 'settings':
      // is_readable() can be false positive if apache user not cgi-bin folder owner...
     /* if (!is_readable(variable_get('uc_mtc_cgi_path', ''))) {
        drupal_set_message(t('Your CGI file seems not readable, please see INSTALL.txt'), 'error');
      }
      if (!is_readable((drupal_get_path('module', 'uc_mtc') .'/pubkey.pem'))) {
        drupal_set_message(t('Your pubkey file is not readable, please see INSTALL.txt'), 'error');
      }*/
      $url = _uc_mtc_url();
      $urlauto = $url .'cart/mtc/auto';
      $form['actionSLK'] = array(
        '#type' => 'textfield',
        '#title' => t('mtc URL'),
        '#description' => t('Your URL from mtc, if empty, will be set to <strong>Demo mode</strong>.'),
        '#default_value' => variable_get('actionSLK', ''),
        '#size' => 60,
      );
	   $form['SLKSecretKey'] = array(
        '#type' => 'textfield',
        '#title' => t('mtc Key'),
        '#description' => t('Your Kye from mtc'),
        '#default_value' => variable_get('SLKSecretKey', ''),
        '#size' => 24,
      );	   
	  $form['storeId'] = array(
        '#type' => 'textfield',
        '#title' => t('mtc store Id'),
        '#description' => t('Your store ID from mtc'),
        '#default_value' => variable_get('storeId', ''),
        '#size' => 24,
      );
	  
	  
      $form['uc_mtc_text'] = array(
        '#type' => 'item',
        '#prefix' => '<div class="help">',
        '#value' => t('You can configure your mtc account, this url are given on payment call, so it can be optional:') .'<ul><li>'. 
        t('Adresse URL retour OK : %url', array('%url' => $url .'cart/mtc/effectue'), 'fr') .'</li><li>'. 
        t('Adresse URL retour erreur : %url', array('%url' => $url .'cart/mtc/refuse'), 'fr') .'</li><li>'. 
        t('Adresse URL retour abandon : %url', array('%url' => $url .'cart/mtc/annule'), 'fr') .'</li></ul>'. 
        t('IMPORTANT: you must use auto notification by given by e-mail this url to mtc.') .'<br/>'. t('Only auto can validate a payment !') .'<ul><li>'. 
        t('AUTO URL: %url', array('%url' => $url .'cart/mtc/auto')) .'</li></ul>',
        '#suffix' => '</div>',
      );
      $form['uc_mtc_site'] = array(
        '#type' => 'textfield',
        '#title' => t('mtc site number'),
        '#description' => t('Your site number from mtc, if empty, will be set to <strong>Demo mode</strong>.'),
        '#default_value' => variable_get('uc_mtc_site', ''),
        '#size' => 72,
      );
      $form['uc_mtc_rang'] = array(
        '#type' => 'textfield',
        '#title' => t('mtc rank number'),
        '#description' => t('Your rank number from mtc, if empty, will be set to <strong>Demo mode</strong>.'),
        '#default_value' => variable_get('uc_mtc_rang', ''),
        '#size' => 24,
      );
      $form['uc_mtc_identifiant'] = array(
        '#type' => 'textfield',
        '#title' => t('mtc identifier'),
        '#description' => t('Your identifier from mtc, if empty, will be set to <strong>Demo mode</strong>.'),
        '#default_value' => variable_get('uc_mtc_identifiant', ''),
        '#size' => 24,
      );
      $form['uc_mtc_language'] = array(
        '#type' => 'select',
        '#title' => t('Language preference'),
        '#description' => t('Adjust language on mtc pages.'),
        '#options' => _uc_mtc_language(),
        '#default_value' => variable_get('uc_mtc_language', 'FRA'),
      );
      $form['uc_mtc_method_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Payment method title'),
        '#description' => t('Payment title used on checkout page'),
        '#default_value' => variable_get('uc_mtc_method_title', t('Credit card on a secured server.')),
      );
      $form['uc_mtc_method_descr'] = array(
        '#type' => 'textarea',
        '#title' => t('Payment method description'),
        '#default_value' => variable_get('uc_mtc_method_descr', t('Redirect to mtc to pay by credit card.')),
      );
      $form['uc_mtc_method_title_icons'] = array(
        '#type' => 'select',
        '#title' => t('Icon on payment title'),
        '#description' => t('Images are taken from <em>uc_mtc/images/logo</em>. Will be on the left of the title.'),
        '#options' => _uc_mtc_list_img(),
        '#default_value' => variable_get('uc_mtc_method_title_icons', 'PayboxServicesMINI.gif'),
      );
      $form['uc_mtc_checkout_button'] = array(
        '#type' => 'textfield',
        '#title' => t('Ubercart order review submit button text'),
        '#description' => t('Provide mtc specific text for the submit button on the order review page.'),
        '#default_value' => variable_get('uc_mtc_checkout_button', t('Submit Order')),
        '#required' => TRUE,
        '#size' => 20,
      );
      $form['mtc'] = array(
        '#type' => 'fieldset',
        '#title' => t('mtc administration setup'),
        '#description' => t('This information <b>must be the same</b> as those of your mtc administration interface.'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $form['mtc']['uc_mtc_devise'] = array(
        '#type' => 'select',
        '#title' => t('Currency'),
        '#description' => t('Select currency. To use different currency other than Euro, you need to contact mtc !. Ubercart does not use multiple currency, you need to set up this options according to <a href="@url">ubercart shop configuration</a>.', array('@url' => base_path() .'admin/store/settings/store/edit/format')),
        '#options' => _uc_mtc_currency(),
        '#default_value' => variable_get('uc_mtc_devise', '978'),
      );
      $form['mtc']['uc_mtc_typepaiement'] = array(
        '#type' => 'select',
        '#title' => t('Payment Type'),
        '#description' => t('Select the type(s) of payment permitted. If none is selected, the selection will be done on the mtc site'),
        '#options' => _uc_mtc_payment_type(),
        '#multiple' => TRUE,
        '#default_value' => variable_get('uc_mtc_typepaiement', ''),
      ); 
      $form['mtc']['uc_mtc_cgi_path'] = array(
        '#type' => 'textfield',
        '#title' => t('mtc cgi path'),
        '#description' => t('mtc cgi file full path. eg. /var/www/cgi-bin/modulev3.cgi'),
        '#default_value' => variable_get('uc_mtc_cgi_path', ''),
        '#required' => TRUE
      );
      $form['mtc']['uc_mtc_ip_check'] = array(
        '#type' => 'textarea',
        '#title' => t('mtc server IP allowed'),
        '#default_value' => variable_get('uc_mtc_ip_check', _uc_mtc_ip_check()),
        '#description' => t('mtc server IP allowed to complete payment during auto process, one IP per line. NO HTML allowed.'),
        '#required' => TRUE
      );
      $form['uc_mtc_debug'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable debug mode'),
        '#description' => t('Be carefull ! Debug show info to user and validate demonstration payment.'),
        '#default_value' => variable_get('uc_mtc_debug', FALSE),
      );
      return $form;
  }
}

/**
 * Form to display the credit card details form on the checkout screen.
 */
function uc_payment_method_mtc_form($form_state, $order) {
  // Normally the payment data is posted in via AJAX.
  if (!empty($_POST['payment-details-data']) && arg(0) == 'cart') {
    $order->payment_details = uc_mtc_cache('save', $_POST['payment-details-data']);
  }

  // But we have to accommodate failed checkout form validation here.
  if (isset($_SESSION['sespb'])) {
    $order->payment_details = uc_mtc_cache('save', $_SESSION['sespb']);
    unset($_SESSION['sespb']);
  }
  $payment_types = _uc_mtc_payment_type();
  $options = array(); 
  foreach ($payment_types as $payment_type['code'] => $payment_type['name']) {
    if (in_array($payment_type['code'], variable_get('uc_mtc_typepaiement', ''))) {
      $options[$payment_type['code']] = $payment_type['name'];
    }
    switch (count($options)) {
      case 0:
        $form['uc_mtc_typepaiement'] = array(
          '#type' => 'hidden',
          '#value' => 'ALL',
        );
        break;
      case 1:
        $value = array_keys($options);
        $value = $value[0];
        $form['uc_mtc_typepaiement'] = array(
          '#type' => 'hidden',
          '#value' => $value,
        );
        break;
      default:
        $form['uc_mtc_typepaiement'] = array(
          '#type' => 'radios',
          '#title' => t('Payment Type'),
          '#default_value' => $order->payment_details['uc_mtc_typepaiement'],
          '#options' => $options,
          '#required' => TRUE,
        );
        break;
    }
  }

  return $form;
}

/**
 * Caches payment details on a pageload for use in various functions.
 *
 * @param $op
 *   The cache operation to perform; either 'save', 'load', or 'clear'.
 * @param $data
 *   The serialized string containing the payment data.
 * @return
 *   An array of payment details.
 */
function uc_mtc_cache($op, $data = NULL) {
  // The payment data will be stored in this static variable.
  static $uc_mtc_cache = array();

  if ($op == 'save') {
    $uc_mtc_cache = unserialize($data);
  }
  elseif ($op == 'clear') {
    $uc_mtc_cache = array();
  }

  return $uc_mtc_cache;
}

/**
 * function to check mtc server ip when payment notification and auto notification
 */
function _uc_mtc_ip_check($ip = FALSE) {
  $mtc_ip = variable_get('uc_mtc_ip_check', '');
  if (!is_array($mtc_ip) && ($mtc_ip != '')) {
    $mtc_ip = explode("\n", $mtc_ip);
  }
  else {
    $mtc_ip = array(
      "194.2.160.66",
      "195.101.99.72",
      "194.2.122.158",
    );
  }
  // no empty line
  $mtc_ip = array_filter($mtc_ip);
  if ($ip) {
    $output = FALSE;
    foreach($mtc_ip as $v) {
      if (rtrim($ip) == $ip) {
        $output = TRUE;
      }
    }
    return $output;
  }
  else {
    return implode("\n", $mtc_ip);
  }
}

/**
 * Define payment types available, see mtc doc
 */
function _uc_mtc_payment_type() {
  $mtc_payment_type = array(
    'CARTE|CB' => t('Carte Bleue'),
    'CARTE|VISA' => t('VISA'),
    'CARTE|EUROCARD_MASTERCARD' => t('MasterCard'),
    'CARTE|E_CARD' => t('E-Bleue'),
    'CARTE|AMEX' => t('American Express'),
    'CARTE|DINERS' => t('Diner\'s Club'),
    'CARTE|JCB' => t('JCB'),
    'CARTE|COFINOGA' => t('Cofinoga'),
    'CARTE|SOFINCO' => t('Sofinco'),
    'CARTE|AURORE' => t('Aurore'),
    'CARTE|CDGP' => t('CDGP'),
    'CARTE|24h00' => t('24h00'),
    'CARTE|RIVEGAUCHE' => t('Rive Gauche'),
    'SYMPASS|CB' => t('Carte Bleue (Sympass)'),
    'SYMPASS|VISA' => t('VISA (Sympass)'),
    'SYMPASS|EUROCARD_MASTERCARD' => t('MasterCard (Sympass)'),
    'SYMPASS|E_CARD' => t('E-Bleue (Sympass)'),
    'SYMPASS|AMEX' => t('American Express (Sympass)'),
    'SYMPASS|DINERS' => t('Diner\'s Club (Sympass)'),
    'SYMPASS|JCB' => t('JCB (Sympass)'),
    'SYMPASS|AURORE' => t('Aurore (Sympass)'),
    'PAYNOVA|PAYNOVA' => t('Paynova'),
    'TERMINEO|TERMINEO' => t('Termineo'),
    'PAYPAL|PAYPAL' => t('Paypal'),
    'UNEURO|UNEURO' => t('Un Euro'),
    'NETRESERVE|NETCDGP' => t('CDGP (Netreserve)'),
    'NETRESERVE|NETCOF' => t('Cofinoga (Netreserve)'),
  );
  return $mtc_payment_type;
}

/**
 * helper to create proper url
 */
function _uc_mtc_url() {
  $proto = $_SERVER['HTTPS'] ? 'https://' : 'http://';
  $host = $_SERVER['SERVER_NAME'];
  $port = ($_SERVER['SERVER_PORT'] == 80 ? '' : ':'. $_SERVER['SERVER_PORT']);
  return $proto . $host . $port . base_path();
}

/**
 * helper to list image from module directory
 */
function _uc_mtc_list_img($rep = 'logo')  {
  $dir = drupal_get_path('module', 'uc_mtc') .'/images/'. $rep;
  $rep == 'logo' ? $liste = array(0 => t('no logo')) : '' ;
  if (is_dir($dir)) {
    if ($dh = opendir($dir)) {
      while (($file = readdir($dh)) !== FALSE) {
        if ( "." == $file || ".." == $file ) {
          continue;
        }
        else {
          // if get folder from windows system
          $file != 'Thumbs.db' ? $liste[$file] = $file : '';
        }
      }
      closedir($dh);
    }
  }
  return $liste;
}

/**
 * Define language available and check, see mtc doc
 */
function _uc_mtc_language($lang = FALSE) {
  $output = array(
    'FRA' => t('French'),
    'GBR' => t('English'),
    'ESP' => t('Spanish'),
    'DEU' => t('Dutch'),
    'ITA' => t('Italian'),
    'NLD' => t('Holland'),
    'SWE' => t('Swedish'),
  );
  if ($lang) {
    in_array($lang, $output) ? $output = $lang : $output = $output;
  }
  return $output;
}

/**
 * Define currency available and check, see mtc doc
 * convert ubercart currency in mtc currency
 */
function _uc_mtc_currency($mtc = TRUE) {
  $mtc_currency = array(
    '978' => t('Euro (EUR)'),
    '840' => t('American Dollar (USD)'),
    '952' => t('Franc CFA (CFA)'),
    '952' => t('Maroc MAD (MAD)')
  );
  $currency = array(
    'EUR' => t('Euro'),
    'USD' => t('American Dollar'),
    'CFA' => t('Franc CFA'),
    'MAD' => t('Maroc MAD')
  );
  $mtc ? $output = $mtc_currency : $output = $currency;
  return $output;
}
